<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status,这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,你会看到log4j2内部各种详细输出 -->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身,设置间隔秒数 -->
<configuration status="WARN" monitorInterval="1800">
    <Properties>
        <property name="basePath">E:/log/eureka_client_integration</property>
        <!-- 日志默认输出级别 -->
        <property name="output_log_level">DEBUG</property>

        <!-- 日志文件默认输出格式,不带行号输出(行号显示会影响日志输出性能);%C:大写,类名;%M:方法名;%m:错误信息;%n:换行 -->
        <property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %C.%M-%m%n</property>
        <!-- 日志默认切割的最小单位 -->
        <property name="every_file_size">20MB</property>


        <Property name="LOG_EXCEPTION_CONVERSION_WORD">%xwEx</Property>
        <Property name="LOG_LEVEL_PATTERN">%5p</Property>
        <Property name="LOG_DATEFORMAT_PATTERN">yyyy-MM-dd HH:mm:ss.SSS</Property>
        <Property name="CONSOLE_LOG_PATTERN">%clr{%d{${sys:LOG_DATEFORMAT_PATTERN}}}{faint} %clr{${sys:LOG_LEVEL_PATTERN}} %clr{%pid}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}
        </Property>
        <Property name="FILE_LOG_PATTERN">%d{${LOG_DATEFORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} %pid --- [%t] %-40.40c{1.} : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}
        </Property>


        <!-- 日志默认存放路径(所有级别日志) -->
        <property name="rolling_fileName">${basePath}/all.log</property>
        <!-- 日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
        <property name="rolling_filePattern">${basePath}/time-based-logs/%d{yyyy-MM-dd}-all.log.zip
        </property>
        <!-- 日志默认同类型日志,同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
        <property name="rolling_max">50</property>


        <!-- Info日志默认存放路径(Info级别日志) -->
        <property name="info_fileName">${basePath}/info.log</property>
        <!-- Info日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
        <property name="info_filePattern">${basePath}/time-based-logs/%d{yyyy-MM-dd}-info.log.zip
        </property>
        <!-- Info日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
        <property name="info_max">10</property>


        <!-- Warn日志默认存放路径(Warn级别日志) -->
        <property name="warn_fileName">${basePath}/warn.log</property>
        <!-- Warn日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
        <property name="warn_filePattern">${basePath}/time-based-logs/%d{yyyy-MM-dd}-warn.log.zip
        </property>
        <!-- Warn日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
        <property name="warn_max">10</property>

        <!-- Error日志默认存放路径(Error级别日志) -->
        <property name="error_fileName">${basePath}/error.log</property>
        <!-- Error日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
        <property name="error_filePattern">${basePath}/time-based-logs/%d{yyyy-MM-dd}-error.log.zip
        </property>
        <!-- Error日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
        <property name="error_max">10</property>

        <!-- 控制台显示的日志最低级别 -->
        <property name="console_print_level">DEBUG</property>


        <!-- druid日志默认存放路径(Error级别日志) -->
        <property name="druid_fileName">${basePath}/druid.log</property>
        <!-- druid日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
        <property name="druid_filePattern">${basePath}/time-based-logs/%d{yyyy-MM-dd}-druid.log.zip
        </property>
        <!-- druid日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
        <property name="druid_max">10</property>

    </Properties>

    <!--定义appender -->
    <appenders>
        <!-- 用来定义输出到控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 设置控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <ThresholdFilter level="${console_print_level}" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 设置输出格式,不设置默认为:%m%n -->
            <PatternLayout pattern="${sys:CONSOLE_LOG_PATTERN}"/>
        </Console>

        <!-- 打印root中指定的level级别以上的日志到文件 -->
        <RollingFile name="RollingFile" fileName="${rolling_fileName}"
                     filePattern="${rolling_filePattern}">
            <PatternLayout pattern="${sys:FILE_LOG_PATTERN}"/>
            <Policies>
                <!-- jvm重启就进行一次rollover-->
                <OnStartupTriggeringPolicy/>
                <!-- 文件大小达到20mb进行一次rollover -->
                <SizeBasedTriggeringPolicy size="20 MB"/>
                <!-- TimeBasedTriggeringPolicy是最多用到的Policy，
                interval默认值是1，根据filePattern中日期的最小单位，例如
                在该配置里是mm（分钟），设置interval="2"则每隔两分钟将发生
                一次rollover，按当前配置，具体表现就是隔两分钟得到一个log.zip。
                modulate就是让第一次rollover发生在区间边界上（即便还没到
                interval的时长），按照当前配置，首次rollover会发生在比如
                8点50分0秒，这样之后的rollover就是8点52分0秒、8点54分0秒..
                这样做的好处在于rollover的时机就变得很有规律很好预测，生成的
                文件还很整齐（假设时间最小单位为天，interval="1"，那么就
                变成稳定每天0点自动rollover了。。）。还有个属性叫maxRandomDelay，
                防止很多应用在同一时间一起rollover的，暂时不理它。
                  -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <!-- DefaultRolloverStrategy，默认rollover策略。参数：
                fileIndex有两个值，max和min，就是决定生成文件是从序号大的到
                序号小的，还是从序号小的到序号大。min，计数器的起始值，
                 默认是1；max，计数器的最大值，默认是7。还有两个参数暂时不管。-->
                <DefaultRolloverStrategy max="${info_max}">
                    <Delete basePath="${basePath}/time-based-logs/" maxDepth="2">
                        <IfFileName glob="*.log.zip"/>
                        <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                        另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                        <!--7天-->
                        <!--<IfLastModified age="168H" />-->
                        <!--1个月-->
                        <IfLastModified age="720H"/>
                    </Delete>
                </DefaultRolloverStrategy>
            </Policies>

        </RollingFile>

        <!-- 打印INFO级别的日志到文件 -->
        <RollingFile name="InfoFile" fileName="${info_fileName}"
                     filePattern="${info_filePattern}">
            <PatternLayout pattern="${sys:FILE_LOG_PATTERN}"/>

            <!-- 匹配INFO级别 -->
            <Filters>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <Policies>
                <!-- jvm重启就进行一次rollover-->
                <OnStartupTriggeringPolicy/>
                <!-- 文件大小达到20mb进行一次rollover -->
                <SizeBasedTriggeringPolicy size="${every_file_size}"/>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <DefaultRolloverStrategy max="${info_max}"/>
            </Policies>
        </RollingFile>

        <!-- 打印WARN级别的日志到文件 -->
        <RollingFile name="WarnFile" fileName="${warn_fileName}"
                     filePattern="${warn_filePattern}">
            <PatternLayout pattern="${sys:FILE_LOG_PATTERN}"/>
            <!-- 匹配WARN级别 -->
            <Filters>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <Policies>
                <!-- jvm重启就进行一次rollover-->
                <OnStartupTriggeringPolicy/>
                <!-- 文件大小达到20mb进行一次rollover -->
                <SizeBasedTriggeringPolicy size="${every_file_size}"/>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <DefaultRolloverStrategy max="${info_max}"/>
            </Policies>
        </RollingFile>

        <!-- 打印ERROR级别的日志到文件 -->
        <RollingFile name="ErrorFile" fileName="${error_fileName}"
                     filePattern="${error_filePattern}">
            <PatternLayout pattern="${sys:FILE_LOG_PATTERN}"/>
            <!-- 匹配ERROR级别 -->
            <Filters>
                <ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <Policies>
                <!-- jvm重启就进行一次rollover-->
                <OnStartupTriggeringPolicy/>
                <!-- 文件大小达到20mb进行一次rollover -->
                <SizeBasedTriggeringPolicy size="${every_file_size}"/>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <DefaultRolloverStrategy max="${info_max}"/>
            </Policies>
        </RollingFile>

        <!--druid的日志记录追加器-->
        <RollingFile name="druidSqlRollingFile" fileName="${druid_fileName}"
                     filePattern="${druid_filePattern}">
            <PatternLayout pattern="${druid_pattern}"/>
            <Policies>
                <!-- jvm重启就进行一次rollover-->
                <OnStartupTriggeringPolicy/>
                <!-- 文件大小达到20mb进行一次rollover -->
                <SizeBasedTriggeringPolicy size="${every_file_size}"/>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <DefaultRolloverStrategy max="${info_max}"/>
            </Policies>
        </RollingFile>
    </appenders>

    <!--然后定义logger,只有定义了logger并引入的appender,appender才会生效 -->
    <loggers>

        <!-- 设置对打印sql语句的支持 -->
        <logger name="java.sql" level="debug" additivity="false">
            <appender-ref ref="Console"/>
        </logger>

        <!--记录druid-sql的记录-->
        <logger name="druid.sql.Statement" level="debug" additivity="false">
            <appender-ref ref="druidSqlRollingFile"/>
        </logger>

        <!--建立一个默认的root的logger -->
        <root level="${output_log_level}">
            <appender-ref ref="Console"/>
            <!--<appender-ref ref="RollingFile"/>-->
            <!--<appender-ref ref="InfoFile"/>-->
            <!--<appender-ref ref="WarnFile"/>-->
            <!--<appender-ref ref="ErrorFile"/>-->
        </root>
    </loggers>
</configuration>